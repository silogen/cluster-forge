apiVersion: v1
kind: ConfigMap
metadata:
  name: gitea-config-script
  namespace: keycloak
data:
  configure-gitea-kubectl.sh: |
    #!/bin/bash
    apt-get update && apt-get install -y curl jq

    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin

    function wait_for_keycloak() {
      echo "Checking keycloak..."
      echo ""
      while true; do
          NAMESPACE="keycloak"
          LABEL="app=keycloak"
          CONTAINER="keycloak"

          # Find the first pod name matching label and is Running
          PODS=$(kubectl get pods -n "$NAMESPACE" -l "$LABEL" --field-selector=status.phase=Running -o jsonpath="{.items[*].metadata.name}")
          FIRST_POD=$(echo "$PODS" | awk '{print $1}')
          if [[ -z "$FIRST_POD" ]]; then
              echo "No running pod with label $LABEL in namespace $NAMESPACE found yet."
              echo "Waiting 10 seconds..."
              sleep 10
              continue
          fi
          POD=$FIRST_POD

          echo "Found running pod: $POD"
          # Check if the specific container is present and ready
          IS_READY=$(kubectl get pod "$POD" -n "$NAMESPACE" -o jsonpath="{.status.containerStatuses[?(@.name=='$CONTAINER')].ready}")
          if [[ "$IS_READY" == "true" ]]; then
              echo "Container '$CONTAINER' in pod '$POD' is ready."
              break
          else
              echo "Container '$CONTAINER' in pod '$POD' is NOT ready."
          fi
      done
    }

    wait_for_keycloak

    # randomize token name to avoid collisions
    RANDOM_TOKEN_NAME='giteajob-'$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 5)

    kubectl -n cf-gitea exec deploy/gitea -c gitea -- \
      gitea admin user create --username $ADMIN_USERNAME --password $ADMIN_PASSWORD --admin=true --must-change-password=false --email ${ADMIN_USERNAME}@${DOMAIN}

    admin_token=$(kubectl -n cf-gitea exec deploy/gitea -c gitea -- \
      gitea admin user generate-access-token --raw --username $ADMIN_USERNAME --token-name ${RANDOM_TOKEN_NAME} --scopes all
    )

    # Update Gitea config to use correct domain
    kubectl -n cf-gitea exec deploy/gitea -c gitea -- \
      sed -i -e "s/git\.example\.com/gitea\.$DOMAIN/g" /data/gitea/conf/app.ini

    kubectl -n cf-gitea exec deploy/gitea -c gitea -- \
      sed -i -e "s/http:/https:/g" /data/gitea/conf/app.ini

    # Rename user forge to forge_user
    curl -H "Content-Type: application/json" -H "Authorization: Bearer ${admin_token}" -d '{"new_username": "forge_user"}' https://gitea.${DOMAIN}/api/v1/admin/users/forge/rename

    # create organization forge
    curl -H "Content-Type: application/json" -H "Authorization: Bearer ${admin_token}" -d '{"username": "forge"}' https://gitea.${DOMAIN}/api/v1/admin/users/forge_user/orgs

    # create team Developers with write access to org and save the ID
    TEAM_ID=$(curl -H "Content-Type: application/json" -H "Authorization: Bearer ${admin_token}" -d '{"name": "Developers", "permission": "write", "units": ["repo.actions","repo.code","repo.issues","repo.ext_issues","repo.wiki","repo.ext_wiki","repo.pulls","repo.releases","repo.projects","repo.ext_wiki"]}' https://gitea.${DOMAIN}/api/v1/orgs/forge/teams | jq -r '.id')

    # transfer repo clusterforge to org forge
    curl -H "Content-Type: application/json" -H "Authorization: Bearer ${admin_token}" -d '{"new_owner": "forge"}' https://gitea.${DOMAIN}/api/v1/repos/forge_user/clusterforge/transfer

    # add forge repo to Developer teams 
    curl -H "Content-Type: application/json" -X PUT -H "Authorization: Bearer ${admin_token}"  https://gitea.${DOMAIN}/api/v1/teams/${TEAM_ID}/repos/forge/clusterforge

    # add user forge_user as admin collaborator to repo clusterforge
    curl -H "Content-Type: application/json" -H "Authorization: Bearer ${admin_token}" -d '{"permission": "admin"}' https://gitea.${DOMAIN}/api/v1/repos/forge/clusterforge/collaborators/forge_user



    kubectl -n cf-gitea exec deploy/gitea -c gitea -- \
      gitea admin auth add-oauth \
      --name "Keycloak" \
      --provider openidConnect \
      --key "gitea" \
      --secret ${CLIENT_SECRET} \
      --group-claim-name "groups" \
      --scopes "groups" \
      --group-team-map "{\"/gitea-users\":{\"forge\":[\"Developers\"]}}" \
      --auto-discover-url "https://kc.${DOMAIN}/realms/k8s/.well-known/openid-configuration"


    podname=$(kubectl -n cf-gitea get pods --selector=app=gitea -o jsonpath='{.items[*].metadata.name}')
    kubectl -n cf-gitea delete --wait=false pod/$podname

---
apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-oauth-config
  namespace: keycloak
spec:
  template:
    spec:
      serviceAccountName: gitea-oauth-config-sa
      containers:
      - name: gitea-config
        image: ubuntu:20.04
        command: ["bash", "-c", "/scripts/configure-gitea-kubectl.sh"]
        env:
        - name: DOMAIN
          value: not-a-domain
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: k8s-realm-credentials
              key: GITEA_ADMIN_USERNAME
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k8s-realm-credentials
              key: GITEA_ADMIN_PASSWORD
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: k8s-realm-credentials
              key: GITEA_CLIENT_SECRET
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      volumes:
      - name: script-volume
        configMap:
          name: gitea-config-script
          defaultMode: 0755
      restartPolicy: OnFailure
      
  backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitea-oauth-config-sa
  namespace: keycloak
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitea-oauth-config-role
rules:
- apiGroups: ["", "apps"]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
- apiGroups: ["", "apps"]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: ["", "apps"]
  resources: ["configmaps"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gitea-oauth-config-binding
subjects:
- kind: ServiceAccount
  name: gitea-oauth-config-sa
  namespace: keycloak
roleRef:
  kind: ClusterRole
  name: gitea-oauth-config-role
  apiGroup: rbac.authorization.k8s.io