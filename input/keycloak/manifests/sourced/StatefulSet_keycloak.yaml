---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 17.0.1-legacy
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
  serviceName: keycloak-headless
  template:
    metadata:
      annotations:
        checksum/config-startup: d10de0ace316128d803088610f64a062d6a39d5ca8d7a4034cfd2ed2917d39de
        checksum/secrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: keycloak
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/component
                      operator: NotIn
                      values:
                        - test
                  matchLabels:
                    app.kubernetes.io/instance: keycloak
                    app.kubernetes.io/name: keycloak
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: NotIn
                    values:
                      - test
                matchLabels:
                  app.kubernetes.io/instance: keycloak
                  app.kubernetes.io/name: keycloak
              topologyKey: kubernetes.io/hostname
      containers:
        - args: []
          command: []
          env:
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              value: keycloak-postgresql
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: keycloak
            - name: DB_USER
              value: keycloak
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: keycloak-postgresql
          envFrom: null
          image: quay.io/keycloak/keycloak:17.0.1-legacy
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 0
            timeoutSeconds: 5
          name: keycloak
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 9990
              name: http-management
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /opt/jboss/startup-scripts/keycloak.cli
              name: startup
              readOnly: true
              subPath: keycloak.cli
      enableServiceLinks: true
      initContainers:
        - command:
            - sh
            - -c
            - |
              echo 'Waiting for PostgreSQL to become ready...'

              until printf "." && nc -z -w 2 keycloak-postgresql 5432; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK âœ“'
          image: docker.io/busybox:1.32
          imagePullPolicy: IfNotPresent
          name: pgchecker
          resources:
            limits:
              cpu: 20m
              memory: 32Mi
            requests:
              cpu: 20m
              memory: 32Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      serviceAccountName: keycloak
      terminationGracePeriodSeconds: 60
      volumes:
        - configMap:
            defaultMode: 365
            items:
              - key: keycloak.cli
                path: keycloak.cli
            name: keycloak-startup
          name: startup
  updateStrategy:
    type: RollingUpdate
