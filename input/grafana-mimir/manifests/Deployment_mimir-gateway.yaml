---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/name: mimir
    app.kubernetes.io/version: 2.11.0
  name: mimir-gateway
  namespace: grafana-mimir
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: gateway
      app.kubernetes.io/instance: mimir
      app.kubernetes.io/name: mimir
  strategy:
    rollingUpdate:
      maxSurge: 15%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 6e1d3774dc9ed5675b3dcaf6fcf57cb373b1228996f5b98916fc18665b7fd02f
      labels:
        app.kubernetes.io/component: gateway
        app.kubernetes.io/instance: mimir
        app.kubernetes.io/name: mimir
        app.kubernetes.io/version: 2.11.0
      namespace: grafana-mimir
    spec:
      affinity: {}
      containers:
        - args: null
          env:
            - name: API_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: API_ACCESS_KEY
                  name: mimir-minio-creds
            - name: API_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: API_SECRET_KEY
                  name: mimir-minio-creds
          envFrom: null
          image: docker.io/nginxinc/nginx-unprivileged:1.25-alpine
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - containerPort: 8080
              name: http-metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /etc/nginx
              name: nginx-config
            - mountPath: /etc/nginx/secrets
              name: auth
            - mountPath: /tmp
              name: tmp
            - mountPath: /docker-entrypoint.d
              name: docker-entrypoint-d-override
      initContainers: []
      nodeSelector: {}
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: mimir
      terminationGracePeriodSeconds: 30
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: gateway
              app.kubernetes.io/instance: mimir
              app.kubernetes.io/name: mimir
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            items:
              - key: mimir.yaml
                path: mimir.yaml
            name: mimir-config
          name: config
        - configMap:
            name: mimir-runtime
          name: runtime-config
        - configMap:
            name: mimir-gateway-nginx
          name: nginx-config
        - emptyDir: {}
          name: docker-entrypoint-d-override
        - name: auth
          secret:
            secretName: mimir-tenant-creds
        - emptyDir: {}
          name: tmp
