# These values configure the Grafana Mimir or Grafana Enterprise Metrics cluster
# for a more production-ready setup. The setup targets 70% CPU and memory utilization
# so that the cluster has room to grow. The resource requests reflect 70% utilization
# and the limits reflect 100% utilization. The values do not set CPU limits,
# because CPU limits have caused severe issues elsewhere, so we don't apply any in our helm chart:
# see https://engineering.indeedblog.com/blog/2019/12/unthrottled-fixing-cpu-limits-in-the-cloud/
# If you require CPU limits for billing purposes see capped-small.yaml
#
# These values are suitable for ingestion of ~1M series and scrape interval of 15s.
# This implies ingestion rate of around 66000 samples per second.
#
# Query requirements can vary dramatically depending on query rate and query
# ranges. The values here satisfy a "usual" query load of around 5 queries per second
# as seen from our production clusters at this scale.
#
# The values in this file also add podAntiAffinity rules for ingesters and store-gateways.
# The rules ensure that the replicas of the same component are not scheduled on the same
# Kubernetes Node. Zone-aware replication is enabled by default on new installation.
# Refer to [Migrate from single zone to zone-aware replication with Helm](https://grafana.com/docs/mimir/latest/migration-guide/migrating-from-single-zone-with-helm) and
# [Zone-Aware Replication](https://grafana.com/docs/mimir/latest/configure/configure-zone-aware-replication/)
# for more information.
#
# MinIO is no longer enabled, and you are encouraged to use your cloud providers
# object storage service such as S3 or GCS.
global:
  extraEnv:
## Access buckets
    - name: API_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-minio-creds
          key: API_ACCESS_KEY
    - name: API_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: mimir-minio-creds
          key: API_SECRET_KEY

mimir:
  structuredConfig:
    common:
      storage:
        backend: s3
        s3:
          endpoint: minio.minio-tenant-default.svc.cluster.local:443 ####
          secret_access_key: "${API_SECRET_KEY}" ####
          access_key_id: "${API_ACCESS_KEY}" ####
          insecure: false ## for toy minio #########
          http:
            insecure_skip_verify: true

    blocks_storage:
      backend: s3
      s3:
        bucket_name: cluster-forge-mimir
        insecure: false ##
    alertmanager_storage: ##
      s3:
        bucket_name: cluster-forge-mimir
        insecure: false ##
    ruler_storage: ##
      s3:
        bucket_name: cluster-forge-mimir
        insecure: false ##
    limits:
      max_label_names_per_series: 50
      max_global_series_per_user: 1000000

alertmanager:
  enabled: false
  persistentVolume:
    enabled: true
  replicas: 2
  resources:
    limits:
      memory: 1.4Gi
    requests:
      cpu: 1
      memory: 1Gi
  statefulSet:
    enabled: true

compactor:
  persistentVolume:
    size: 5Gi
    storageClass: standard 
    #size: 20Gi
  resources:
    limits:
      memory: 1000Mi
    requests:
      cpu: 1.5
      memory: 700Mi

distributor:
  replicas: 4
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 1
      memory: 760Mi

ingester:
  persistentVolume:
    size: 5Gi
    storageClass: standard
    #size: 50Gi
  replicas: 3
  resources:
    limits:
      memory: 12Gi
    requests:
      cpu: 1
      memory: 9Gi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'

  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

admin-cache:
  enabled: true
  replicas: 2

chunks-cache:
  enabled: true
  replicas: 2
  allocatedMemory: 200

index-cache:
  enabled: true
  replicas: 3
  allocatedMemory: 900

metadata-cache:
  enabled: true
  allocatedMemory: 120

results-cache:
  enabled: true
  replicas: 2
  allocatedMemory: 120

minio:
  enabled: false

overrides_exporter:
  replicas: 1
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

querier:
  replicas: 1
  resources:
    limits:
      memory: 3000Mi
    requests:
      cpu: 100m
      memory: 2525Mi

query_frontend:
  replicas: 1
  resources:
    limits:
      memory: 1000Mi
    requests:
      cpu: 200m
      memory: 623Mi

ruler:
  enabled: false
  replicas: 1
  resources:
    limits:
      memory: 2.8Gi
    requests:
      cpu: 1
      memory: 2Gi

store_gateway:
  persistentVolume:
    size: 5Gi
    #size: 20Gi
  replicas: 3
  resources:
    limits:
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 700Mi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'
  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

gateway:
  enabledNonEnterprise: true
  replicas: 1
  nginx:
    basicAuth:
      enabled: true
      #username: ${BASICAUTH_USERNAME} #Passing basic auth info doesn't work
      #password: ${BASICAUTH_PASSWORD} #Passing .htpasswd via existingSecret works
      #existingSecret: mimir-credentials ###
      existingSecret: mimir-minio-creds ##nginx  htpasswd

query_scheduler:
  enabled: true
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 50m
      memory: 100Mi


nginx:
  enabled: false

extraObjects:
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: mimir-minio-creds
      namespace: grafana-mimir
    spec:
      refreshInterval: "30m"
      secretStoreRef:
        name: k8s-secret-store
        kind: ClusterSecretStore
      target:
        name: mimir-minio-creds
      data:
        - secretKey: API_ACCESS_KEY
          remoteRef:
            key: default-user
            property: API_ACCESS_KEY
        - secretKey: API_SECRET_KEY
          remoteRef:
            key: default-user
            property: API_SECRET_KEY
