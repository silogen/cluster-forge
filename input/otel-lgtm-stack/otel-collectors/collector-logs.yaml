---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector-agent
  namespace: otel-lgtm-stack
spec:
  mode: daemonset
  serviceAccount: otel-collector
  image: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.113.0"
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  tolerations:
        - effect: NoSchedule
          key: exampleKey1
          operator: Equal
          value: "true"
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8888"
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 400Mi
  securityContext: ####
    privileged: true
    runAsUser: 0 ####
    runAsGroup: 0 ####
  config: ####
    receivers:
      filelog/std:
        exclude:
        - /var/log/pods/*/otel-collector/*.log
        - /var/log/pods/*/otc-container/*.log
        - /var/log/pods/*/openobserve-ingester/*.log
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: 2006-01-02T15:04:05.999999999Z07:00
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.log
          to: body
          type: move
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        start_at: end
      # Collect host metrics
      hostmetrics:
        collection_interval: 15s
        root_path: /hostfs
        scrapers:
          cpu: {}
          disk: {}
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/.*
              - /proc/.*
              - /sys/.*
              - /run/k3s/containerd/.*
              - /var/lib/docker/.*
#              - /var/lib/kubelet/.*
              - /snap/.*
          load: {}
          network: {}
          process: {}
            #      kubeletstats:
            #        auth_type: serviceAccount
            #        collection_interval: 15s
            #        endpoint: https://${env:K8S_NODE_NAME}:10250
            #        extra_metadata_labels:
            #        - container.id
            #        - k8s.volume.type
            #        insecure_skip_verify: true
            #        metric_groups:
            #        - node
            #        - pod
            #        - container
            #        - volume
            #        metrics:
            #          k8s.pod.cpu_limit_utilization:
            #            enabled: true
            #          k8s.pod.cpu_request_utilization:
            #            enabled: true
            #          k8s.pod.memory_limit_utilization:
            #            enabled: true
            #          k8s.pod.memory_request_utilization:
            #            enabled: true
#      # Collect kubelet metrics
#      prometheus:
#        config:
#          scrape_configs:
#            - job_name: kubelet
#              scrape_interval: 30s
#              scheme: https
#              kubernetes_sd_configs:
#                - role: node
#              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#              tls_config:
#                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#                insecure_skip_verify: true
#              relabel_configs:
#                - target_label: __metrics_path__
#                  replacement: /metrics/cadvisor
#                - action: labelmap
#                  regex: __meta_kubernetes_node_label_(.+)
#                - source_labels: [__meta_kubernetes_node_name]
#                  action: replace
#                  target_label: node
#            
#            # Pod metrics from the same node
#            - job_name: kubernetes-pods-node
#              scrape_interval: 30s
#              kubernetes_sd_configs:
#                - role: pod
#              relabel_configs:
#                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#                  action: keep
#                  regex: true
#                - source_labels: [__meta_kubernetes_pod_node_name]
#                  action: replace
#                  target_label: node
#                # Keep only pods on the same node as this agent
#                - source_labels: [__meta_kubernetes_pod_node_name]
#                  action: keep
#                  regex: ${K8S_NODE_NAME}
#                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#                  action: replace
#                  target_label: __metrics_path__
#                  regex: (.+)
#                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#                  action: replace
#                  regex: ([^:]+)(?::\d+)?;(\d+)
#                  replacement: $1:$2
#                  target_label: __address__
#    
#            - job_name: kubelet  
#              scrape_interval: 30s  
#              kubernetes_sd_configs:  
#                - role: node  
#              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token  
#              tls_config:  
#                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt  
#                insecure_skip_verify: true  
#              relabel_configs:  
#                - target_label: __metrics_path__  
#                  replacement: /metrics/cadvisor  
#                - action: labelmap  
#                  regex: __meta_kubernetes_node_label_(.+)  
#                - source_labels: [__meta_kubernetes_node_name]  
#                  action: replace  
#                  target_label: node  
    processors:
      attributes:
        actions:
          - key: k8s_cluster
            action: insert
            value: "cluster1"
      batch:
        send_batch_size: 2000
        timeout: 10s
      k8sattributes:
        auth_type: serviceAccount
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: service.name
          - from: pod
            key: k8s-app
            tag_name: service.name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.app.instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: service.version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: k8s.app.component
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.tag
          - container.image.name
          - k8s.cluster.uid
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
          - from: resource_attribute
            name: k8s.node.name
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection
      resourcedetection:
        detectors:
        - env
        override: true
        timeout: 2s
    
    exporters:
      otlp:
        endpoint: http://lgtm-stack.otel-lgtm-stack.svc.cluster.local:4317
        tls:
          insecure: true
      
      # Debug exporter - can remove in production
      debug:
        verbosity: detailed    

    service:
      pipelines:
        #metrics:
          #receivers: [prometheus]
          #receivers: [kubeletstats, hostmetrics]
          #processors: [batch, attributes, k8sattributes]
          #exporters: [otlp, debug]
        logs:
          receivers: [filelog/std]
          processors: [batch, attributes, k8sattributes, resourcedetection]
          exporters: [otlp, debug]
  volumes:
    - name: hostfs
      hostPath:
        path: /
    - name: passwd
      hostPath:
        path: /etc/passwd
    - name: varlog
      hostPath:
        path: /var/log
        type: ''
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
        type: ''
  volumeMounts:
    - name: hostfs
      mountPath: /hostfs
    - name: passwd
      mountPath: /etc/passwd
      readOnly: true
    - name: varlog
      mountPath: /var/log
    - name: varlibdockercontainers
      readOnly: true
      mountPath: /var/lib/docker/containers
