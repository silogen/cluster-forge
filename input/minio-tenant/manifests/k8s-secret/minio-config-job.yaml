apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config-script
  namespace: minio-tenant-default
data:
  configure-minio-kubectl.sh: |
    #!/bin/bash
    apt-get update && apt-get install -y curl jq

    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin

    function wait_for_keycloak() {
      echo "Checking keycloak..."
      echo ""
      while true; do
          NAMESPACE="keycloak"
          LABEL="app=keycloak"
          CONTAINER="keycloak"

          # Find the first pod name matching label and is Running
          PODS=$(kubectl get pods -n "$NAMESPACE" -l "$LABEL" --field-selector=status.phase=Running -o jsonpath="{.items[*].metadata.name}")
          FIRST_POD=$(echo "$PODS" | awk '{print $1}')
          if [[ -z "$FIRST_POD" ]]; then
              echo "No running pod with label $LABEL in namespace $NAMESPACE found yet."
              echo "Waiting 10 seconds..."
              sleep 10
              continue
          fi
          POD=$FIRST_POD

          echo "Found running pod: $POD"
          # Check if the specific container is present and ready
          IS_READY=$(kubectl get pod "$POD" -n "$NAMESPACE" -o jsonpath="{.status.containerStatuses[?(@.name=='$CONTAINER')].ready}")
          if [[ "$IS_READY" == "true" ]]; then
              echo "Container '$CONTAINER' in pod '$POD' is ready."
              break
          else
              echo "Container '$CONTAINER' in pod '$POD' is NOT ready."
          fi
      done
    }

    wait_for_keycloak

    # Note: this is not the right way.
    echo "Restarting minio tenant pool pod after keycloak is alive"
    kubectl -n minio-tenant-default delete --wait=false pod/default-minio-tenant-pool-0-0

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-oauth-config
  namespace: minio-tenant-default
spec:
  template:
    spec:
      serviceAccountName: minio-oauth-config-sa
      containers:
      - name: minio-config
        image: ubuntu:20.04
        command: ["bash", "-c", "/scripts/configure-minio-kubectl.sh"]
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      volumes:
      - name: script-volume
        configMap:
          name: minio-config-script
          defaultMode: 0755
      restartPolicy: OnFailure      
  backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-oauth-config-sa
  namespace: minio-tenant-default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: minio-oauth-config-role
rules:
- apiGroups: ["", "apps"]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
- apiGroups: ["", "apps"]
  resources: ["pods/exec"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: minio-oauth-config-binding
subjects:
- kind: ServiceAccount
  name: minio-oauth-config-sa
  namespace: minio-tenant-default
roleRef:
  kind: ClusterRole
  name: minio-oauth-config-role
  apiGroup: rbac.authorization.k8s.io