apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-generator-script
  namespace: default
data:
  generate-secrets.sh: |
    #!/bin/bash
    set -e
    
    # Generate alphanumeric secret function
    generate_secret() {
        openssl rand -hex 16 | tr 'a-f' 'A-F' | head -c 32
    }
    
    # Generate all secrets first
    AIRM_UI_SECRET=$(generate_secret)
    AIRM_ADMIN_SECRET=$(generate_secret)
    AIRM_CI_SECRET=$(generate_secret)
    CATALOG_SUPERUSER=$(generate_secret)
    CATALOG_USER=$(generate_secret)
    CATALOG_USERNAME=$(generate_secret)
    CHAT_AUTH_SECRET=$(generate_secret)
    DOCKER_PULL_SECRET=$(generate_secret)
    KC_FRONTEND_SECRET=$(generate_secret)
    KC_CREDENTIALS=$(generate_secret)
    SILOGEN_REALM=$(generate_secret)
    AIRM_REALM=$(generate_secret)
    KC_INTERNAL_ID=$(generate_secret)
    KC_INTERNAL_SECRET=$(generate_secret)
    KC_CI_SECRET=$(generate_secret)
    KC_INITIAL_PASSWORD=$(generate_secret)
    KC_SUPERUSER_USERNAME=$(generate_secret)
    AIRM_SUPERUSER_USERNAME=$(generate_secret)
    AIRM_RABBITMQ_USERNAME=$(generate_secret)
    AIRM_OCI_RABBITMQ_USERNAME=$(generate_secret)
    RABBITMQ_BACKUP_CREDS=$(generate_secret)
    KC_SUPERUSER_PASSWORD=$(generate_secret)
    AIRM_SUPERUSER_PASSWORD=$(generate_secret)
    AIRM_USER_PASSWORD=$(generate_secret)
    AIRM_RABBITMQ_PASSWORD=$(generate_secret)
    AIRM_OCI_RABBITMQ_PASSWORD=$(generate_secret)
    HMAC_ACCESS_KEY=$(generate_secret)
    HMAC_SECRET_KEY=$(generate_secret)
    DOCKER_PULL_SECRET2=$(generate_secret)
    AIRM_LEGACY_AUTH=$(generate_secret)
    RABBITMQ_DEFAULT_PASSWORD=$(generate_secret)
    # Create the ClusterSecretStore YAML with pre-generated secrets
    cat > /tmp/final-secret-store.yaml << EOF
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterSecretStore
    metadata:
      name: airm-secret-store
    spec:
      provider:
        fake:
          data:
          - key: loki_tenant_name_oci1
            value: loki_tenant_oci1
          - key: loki_tenant_name_oci2
            value: loki_tenant_oci2
          - key: loki_tenant_name_ocisilogen
            value: loki_tenant_ocisilogen
          - key: loki_tenant_name_ociops
            value: loki_tenant_ociops
          - key: loki_tenant_password_ociclusters
            value: loki_tenant_password_ociclusters
          - key: .htpasswd
            value: "cluster-forge-mimir-test-user:\$apr1\$mszGHRfu\$fDCiA32oRdtP8tXGTTn2M0"
          - key: grafana-admin-id
            value: admin
          - key: grafana-admin-pw
            value: password
          - key: airm-ui-keycloak-secret
            value: ${AIRM_UI_SECRET}
          - key: airm-keycloak-admin-client-id
            value: admin-client-id-value
          - key: airm-keycloak-admin-client-secret
            value: ${AIRM_ADMIN_SECRET}
          - key: airm-ci-client-secret
            value: ${AIRM_CI_SECRET}
          - key: airm-cnpg-user
            value: airm-cnpg-user
          - key: catalog-cnpg-superuser
            value: ${CATALOG_SUPERUSER}
          - key: catalog-cnpg-user
            value: ${CATALOG_USER}
          - key: catalog-cnpg-user-username
            value: ${CATALOG_USERNAME}
          - key: chat-legacy-auth-nextauth-secret
            value: ${CHAT_AUTH_SECRET}
          - key: docker-pull-k8s-external-secret
            value: ${DOCKER_PULL_SECRET}
          - key: keycloak-client-frontend-keycloak-secret
            value: ${KC_FRONTEND_SECRET}
          - key: keycloak-credentials
            value: ${KC_CREDENTIALS}
          - key: silogen-realm-credentials
            value: ${SILOGEN_REALM}
          - key: airm-realm-credentials
            value: ${AIRM_REALM}
          - key: keycloak-client-internal-keycloak-id
            value: ${KC_INTERNAL_ID}
          - key: keycloak-client-internal-keycloak-secret
            value: ${KC_INTERNAL_SECRET}
          - key: keycloak-client-ci-keycloak-secret
            value: ${KC_CI_SECRET}
          - key: keycloak-initial-admin-password
            value: ${KC_INITIAL_PASSWORD}
          - key: keycloak-cnpg-user-username
            value: keycloak
          - key: keycloak-cnpg-superuser-username
            value: ${KC_SUPERUSER_USERNAME}
          - key: airm-cnpg-superuser-username
            value: ${AIRM_SUPERUSER_USERNAME}
          - key: airm-cnpg-user-username
            value: airm_user
          - key: airm-rabbitmq-user-username
            value: ${AIRM_RABBITMQ_USERNAME}
          - key: airm-oci-1-rabbitmq-common-vhost-username
            value: ${AIRM_OCI_RABBITMQ_USERNAME}
          - key: rabbitmq-backup-minio-credentials
            value: ${RABBITMQ_BACKUP_CREDS}
          - key: keycloak-cnpg-superuser-password
            value: ${KC_SUPERUSER_PASSWORD}
          - key: keycloak-cnpg-user-password
            value: keycloak
          - key: keycloak_initial_admin_password
            value: admin
          - key: airm-cnpg-superuser-password
            value: ${AIRM_SUPERUSER_PASSWORD}
          - key: airm-cnpg-user-password
            value: ${AIRM_USER_PASSWORD}
          - key: airm-rabbitmq-user-password
            value: ${AIRM_RABBITMQ_PASSWORD}
          - key: airm-oci-1-rabbitmq-common-vhost-password
            value: ${AIRM_OCI_RABBITMQ_PASSWORD}
          - key: hmac-keys-access-key
            value: ${HMAC_ACCESS_KEY}
          - key: hmac-keys-secret-key
            value: ${HMAC_SECRET_KEY}
          - key: docker-pull-k8s-external-secret
            value: ${DOCKER_PULL_SECRET2}
          - key: airm-legacy-auth-nextauth-secret
            value: ${AIRM_LEGACY_AUTH}
          - key: rabbitmq-default-user-username
            value: username
          - key: rabbitmq-default-user-password
            value: ${RABBITMQ_DEFAULT_PASSWORD}
    EOF
    
    # Apply the secret store
    kubectl apply -f /tmp/final-secret-store.yaml
        
    echo "ClusterSecretStore created successfully!"
    echo "Generated secrets with alphanumeric values only"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-generator
  namespace: default
spec:
  template:
    spec:
      serviceAccountName: secret-generator-sa
      containers:
      - name: secret-generator
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args: ["/scripts/generate-secrets.sh"]
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      volumes:
      - name: script-volume
        configMap:
          name: secret-generator-script
          defaultMode: 0755
      restartPolicy: OnFailure
  backoffLimit: 3

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-generator-sa
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-generator-role
rules:
- apiGroups: ["external-secrets.io"]
  resources: ["clustersecretstores"]
  verbs: ["create", "update", "patch", "get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-generator-binding
subjects:
- kind: ServiceAccount
  name: secret-generator-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-generator-role
  apiGroup: rbac.authorization.k8s.io