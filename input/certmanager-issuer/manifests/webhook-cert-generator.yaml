apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook-cert-generator
  namespace: static-cert-system
data:
  generate-certs.sh: |
    #!/bin/bash
    set -e
    
    NAMESPACE=${NAMESPACE:-static-cert-system}
    SERVICE_NAME=${SERVICE_NAME:-static-cert-issuer-webhook}
    SECRET_NAME=${SECRET_NAME:-webhook-certs}
    
    echo "Generating webhook certificates for ${SERVICE_NAME}.${NAMESPACE}.svc"
    
    # Generate CA private key
    openssl genrsa -out /tmp/ca.key 2048
    
    # Generate CA certificate
    openssl req -new -x509 -days 365 -key /tmp/ca.key \
      -subj "/C=US/ST=CA/L=SF/O=static-cert-issuer/CN=static-cert-issuer-ca" \
      -out /tmp/ca.crt
    
    # Generate server private key
    openssl genrsa -out /tmp/server.key 2048
    
    # Create server certificate config
    cat > /tmp/server.conf <<EOF
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [v3_req]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = ${SERVICE_NAME}
    DNS.2 = ${SERVICE_NAME}.${NAMESPACE}
    DNS.3 = ${SERVICE_NAME}.${NAMESPACE}.svc
    DNS.4 = ${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local
    EOF
    
    # Generate server certificate signing request
    openssl req -new -key /tmp/server.key \
      -subj "/C=US/ST=CA/L=SF/O=static-cert-issuer/CN=${SERVICE_NAME}.${NAMESPACE}.svc" \
      -config /tmp/server.conf \
      -out /tmp/server.csr
    
    # Generate server certificate
    openssl x509 -req -days 365 -in /tmp/server.csr \
      -CA /tmp/ca.crt -CAkey /tmp/ca.key -CAcreateserial \
      -extensions v3_req -extfile /tmp/server.conf \
      -out /tmp/server.crt
    
    echo "Certificates generated successfully"
    
    # Copy certificates to shared volume
    cp /tmp/server.crt /certs/tls.crt
    cp /tmp/server.key /certs/tls.key
    cp /tmp/ca.crt /certs/ca.crt
    
    echo "Certificates copied to /certs/"
    
    # Create Kubernetes secret
    kubectl create secret tls ${SECRET_NAME} \
      --cert=/tmp/server.crt \
      --key=/tmp/server.key \
      --namespace=${NAMESPACE} \
      --dry-run=client -o yaml | kubectl apply -f -
    
    echo "Secret ${SECRET_NAME} created/updated"
    
    # Update webhook configuration with CA bundle
    CA_BUNDLE=$(base64 -w 0 < /tmp/ca.crt)
    kubectl patch mutatingwebhookconfiguration static-cert-issuer-webhook \
      --type='json' \
      -p="[{\"op\": \"replace\", \"path\": \"/webhooks/0/clientConfig/caBundle\", \"value\":\"${CA_BUNDLE}\"}]"
    
    echo "Webhook configuration updated with CA bundle"
    echo "Certificate generation complete!"