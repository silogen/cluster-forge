name: ClusterForge Release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      is_prerelease:
        description: 'Is this a pre-release?'
        required: true
        type: boolean
        default: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
      current_version: ${{ steps.semver.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: get_version
        run: |
          # Get latest version tag or default to v0.0.0 if none exists
          CURRENT_VERSION=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: semver
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          # Remove v prefix for calculation
          VERSION=${CURRENT_VERSION#v}
          IFS='.' read -r major minor patch <<< "$VERSION"

          # For pull requests, use a test version
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            NEW_VERSION="${CURRENT_VERSION}-pr.${{ github.event.pull_request.number }}"
          else
            case "${{ github.event.inputs.version_type }}" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac

            NEW_VERSION="v${major}.${minor}.${patch}"
            if [[ "${{ github.event.inputs.is_prerelease }}" == "true" ]]; then
              NEW_VERSION="${NEW_VERSION}-dev.$(date +%Y%m%d%H%M)"
            fi
          fi

          echo "New version: $NEW_VERSION"
          echo "Current version: $CURRENT_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

  create_release:
    needs: version
    # if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event.inputs.is_prerelease != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.version.outputs.new_version }}
        run: |
          gh release create "$VERSION" \
              --title="ClusterForge Release $VERSION" \
              --repo="$GITHUB_REPOSITORY" \
              --generate-notes
              --prerelease

  build:
    needs: [version, create_release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release:
          - type: enterprise-ai
            name: Enterprise AI
          - type: core
            name: Core
          - type: wekafs
            name: WekaFS
          - type: nuage
            name: Nuage
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cast
        env:
          VERSION: ${{ needs.version.outputs.new_version }}
        run: |
          echo "Building stack for ${{ matrix.release.type }} version $VERSION"
          # go run . cast \
          #   --config input/config-silogen-${{ matrix.release.type }}.yaml \
          #   --imageName ghcr.io/silogen/clusterforge:$VERSION-${{ matrix.release.type }} \
          #   --stackName ${{ matrix.release.type }}-$VERSION \
          #   --non-interactive

      # - name: Cast
      #   env:
      #     VERSION: ${{ needs.version.outputs.new_version }}
      #   run: |
      #     go run . cast \
      #       --config input/config-silogen-${{ matrix.release.type }}.yaml \
      #       --imageName ghcr.io/silogen/clusterforge:$VERSION-${{ matrix.release.type }} \
      #       --stackName ${{ matrix.release.type }}-$VERSION \
      #       --non-interactive

  #     - name: Create release package
  #       env:
  #         VERSION: ${{ needs.version.outputs.new_version }}
  #       run: |
  #         tar -C stacks/ -zcvf stacks/release-${{ matrix.release.type }}-$VERSION.tar.gz ${{ matrix.release.type }}-$VERSION

  #     - name: Upload Release Asset
  #       if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event.inputs.is_prerelease != 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         VERSION: ${{ needs.version.outputs.new_version }}
  #       run: |
  #         # Upload asset to the release
  #         gh release upload "$VERSION" \
  #             "stacks/release-${{ matrix.release.type }}-$VERSION.tar.gz#ClusterForge ${{ matrix.release.name }} Package" \
  #             --clobber

  #     - name: Update Deploy Package
  #       if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && matrix.release.type == 'enterprise-ai' && github.event.inputs.is_prerelease != 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         VERSION: ${{ needs.version.outputs.new_version }}
  #       run: |
  #         # Create release if it doesn't exist (only for enterrise-ai as that is the one used by default in bloom)
  #         if [[ "${{ matrix.release.type }}" == "enterprise-ai" ]]; then
  #           gh release create "$VERSION" \
  #               --title="ClusterForge Release $VERSION" \
  #               --repo="$GITHUB_REPOSITORY" \
  #               --generate-notes
  #         fi

  #         # Upload asset to the release
  #         gh release upload "$VERSION" \
  #             "stacks/release-${{ matrix.release.type }}-$VERSION.tar.gz#ClusterForge ${{ matrix.release.name }} Package"

  #         # For enterprise-ai, also update the deploy release
  #         if [[ "${{ matrix.release.type }}" == "enterprise-ai" ]]; then
  #           cp stacks/release-${{ matrix.release.type }}-$VERSION.tar.gz stacks/deploy-release.tar.gz
  #           if gh release view "deploy" --repo="$GITHUB_REPOSITORY"; then
  #             gh release delete "deploy" --repo="$GITHUB_REPOSITORY" --cleanup-tag --yes
  #           fi
  #           gh release create "deploy" \
  #               --title="ClusterForge Deploy Release $VERSION" \
  #               --repo="$GITHUB_REPOSITORY" \
  #               --generate-notes \
  #               stacks/deploy-release.tar.gz
  #         fi
