name: ClusterForge Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
      image_name:
        default: ghcr.io/silogen/clusterforge


permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    # Define a matrix for the three release types
    strategy:
      matrix:
        release:
          - type: core
            name: Core
          - type: rnd
            name: RnD
          - type: enterprise
            name: Enterprise

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.2'

      - name: Smelt
        run: |
          go run . smelt --config input/config-silogen-${{ matrix.release.type }}.yaml --non-interactive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cast
        run: |
          go run . cast --config input/config-silogen-${{ matrix.release.type }}.yaml \
            --imageName ${{ github.event.inputs.image_name }}:${{ github.event.inputs.version }}-${{ matrix.release.type }} \
            --stackName ${{ github.event.inputs.version }}-${{ matrix.release.type }} \
            --non-interactive

      - name: Clean stack
        run: |
          rm -rf stacks/${{ github.event.inputs.version }}/.git stacks/${{ github.event.inputs.version }}/.gitkeep

      - name: Create release package directory
        run: |
          # Create the desired top-level directory that will appear when unzipped
          PACKAGE_DIR="${{ matrix.release.type }}"
          mkdir -p stacks/${PACKAGE_DIR}
          
          # Move the stack directory and ansible directory into the package directory
          mv stacks/${{ github.event.inputs.version }}-${{ matrix.release.type }}/* stacks/${PACKAGE_DIR}/
          mkdir -p stacks/longhorn
          cp -r setup-cluster/longhorn/ stacks/
          mkdir -p stacks/ingress
          cp -r setup-cluster/ingress stacks/
          cp setup-cluster/setup-forge.sh stacks/

      - name: Create tarball
        run: |
          PACKAGE_DIR="${{ matrix.release.type }}"
          tar -C stacks/ -zcvf stacks/release-${{ matrix.release.type }}-${{ github.event.inputs.version }}.tar.gz ${PACKAGE_DIR} longhorn/ ingress/ setup-forge.sh

      - name: Create release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.event.inputs.version }}-${{ matrix.release.type }}" \
              --title="ClusterForge ${{ matrix.release.name }} release ${{ github.event.inputs.version }}" \
              --repo="$GITHUB_REPOSITORY" \
              --generate-notes \
              stacks/release-${{ matrix.release.type }}-${{ github.event.inputs.version }}.tar.gz

      - name: Make deploy package
        if: github.ref == 'refs/heads/main' && matrix.release.type == 'core'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp stacks/release-${{ matrix.release.type }}-${{ github.event.inputs.version }}.tar.gz stacks/deploy-release.tar.gz
          if gh release view "deploy" --repo="$GITHUB_REPOSITORY"; then
            gh release delete "deploy" --repo="$GITHUB_REPOSITORY" --cleanup-tag --yes
          fi
          gh release create "deploy" \
              --title="ClusterForge Deploy Release" \
              --repo="$GITHUB_REPOSITORY" \
              --generate-notes \
              stacks/deploy-release.tar.gz
      - name: Make test package
        if: github.ref != 'refs/heads/main' && matrix.release.type == 'core'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp stacks/release-${{ matrix.release.type }}-${{ github.event.inputs.version }}.tar.gz stacks/${{ github.event.inputs.version }}-test.tar.gz
          gh release create ${{ github.event.inputs.version }}-test \
              --title="ClusterForge Test Release" \
              --repo="$GITHUB_REPOSITORY" \
              stacks/${{ github.event.inputs.version }}-test.tar.gz
