{
  "$schema": "https://raw.githubusercontent.com/jetify-com/devbox/0.13.7/.schema/devbox.schema.json",
  "packages": [
    "go@1.23",
    "ansible@2.18.1",
    "kubectl@1.32.1",
    "kubernetes-helm@3.17.0",
    "krew@0.4.4",
    "kubecolor@0.5.0",
    "kubelogin-oidc@1.31.1",
    "k9s@0.32.7"
  ],
  "env": {
    "KREW_ROOT": "$DEVBOX_PROJECT_ROOT/.krew"
  },
  "shell": {
    "init_hook": [
      "source $DEVBOX_PROJECT_ROOT/.zshadd"
    ],
    "scripts": {
      "clean": [
        "rm -rf working/*",
        "rm -rf working/.git",
        "rm -rf output/*",
        "rm -rf stacks/latest",
        "rm -rf Library",
        "rm -rf logs/*.log"
      ],
      "resetKind": [
        "kind delete cluster -n forgetest",
        "kind create cluster -n forgetest",
        "kind export kubeconfig -n forgetest --kubeconfig forgetest.yaml"
      ],
      "build": [
        "VERSION=${1:-dev-local}",
        "echo 'ClusterForge Local Build Script'",
        "echo '==============================='",
        "echo \"Version: $VERSION\"",
        "echo 'Note: This script builds packages locally without pushing Docker images'",
        "echo ''",
        "for release in core rnd enterprise; do",
        "  echo \"Building $release release...\"",
        "  echo '----------------------------'",
        "  echo \"Running smelt for $release...\"",
        "  go run . smelt --config \"input/config-silogen-${release}.yaml\" --non-interactive",
        "  echo \"Skipping cast (Docker build) for local testing...\"",
        "  echo 'Copying working directory to stack...'",
        "  mkdir -p \"stacks/${VERSION}-${release}\"",
        "  cp -r working/* \"stacks/${VERSION}-${release}/\"",
        "  echo 'Cleaning stack...'",
        "  rm -rf \"stacks/${VERSION}-${release}/.git\" \"stacks/${VERSION}-${release}/.gitkeep\"",
        "  echo 'Creating release package...'",
        "  mkdir -p \"stacks/clusterforge-${release}\"",
        "  if [ -d \"stacks/${VERSION}-${release}\" ]; then",
        "    cp -r \"stacks/${VERSION}-${release}\"/* \"stacks/clusterforge-${release}/\"",
        "  fi",
        "  echo 'Creating tarball...'",
        "  tar -C stacks/ -zcf \"stacks/release-${release}-${VERSION}.tar.gz\" \"clusterforge-${release}\"",
        "  rm -rf \"stacks/clusterforge-${release}\"",
        "  echo \"âœ“ Built release-${release}-${VERSION}.tar.gz\"",
        "  echo ''",
        "done",
        "echo 'Build complete! Tarballs created in stacks/ directory:'",
        "ls -la stacks/*.tar.gz"
      ]
    }
  }
}
