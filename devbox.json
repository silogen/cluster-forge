{
  "$schema": "https://raw.githubusercontent.com/jetify-com/devbox/0.13.7/.schema/devbox.schema.json",
  "packages": [
    "go@1.23",
    "ansible@2.18.1",
    "kubectl@1.32.1",
    "kubernetes-helm@3.17.0",
    "krew@0.4.4",
    "kubecolor@0.5.0",
    "kubelogin-oidc@1.31.1",
    "k9s@0.32.7"
  ],
  "env": {
    "KREW_ROOT": "$DEVBOX_PROJECT_ROOT/.krew"
  },
  "shell": {
    "init_hook": [
      "source $DEVBOX_PROJECT_ROOT/.zshadd"
    ],
    "scripts": {
      "clean": [
        "rm -rf working/*",
        "rm -rf working/.git",
        "rm -rf output/*",
        "rm -rf stacks/latest",
        "rm -rf Library",
        "rm -rf logs/*.log"
      ],
      "resetKind": [
        "kind delete cluster -n forgetest",
        "kind create cluster -n forgetest",
        "kind export kubeconfig -n forgetest --kubeconfig forgetest.yaml"
      ],
      "build": [
        "VERSION=${1:-dev-local}",
        "echo 'ClusterForge Local Build Script'",
        "echo '==============================='",
        "echo \"Version: $VERSION\"",
        "echo 'Note: This script builds and pushes Docker images to ttl.sh'",
        "echo ''",
        "echo 'Configuring environment for TLS bypass...'",
        "# Set environment variables that may help with TLS issues",
        "export BUILDX_NO_DEFAULT_ATTESTATIONS=1",
        "export DOCKER_BUILDKIT=1", 
        "export BUILDKIT_INLINE_CACHE=1",
        "# Initialize build summary tracking",
        "BUILD_SUMMARY_FILE=\"/tmp/build_summary_$$\"",
        "echo '# Build Summary' > \"$BUILD_SUMMARY_FILE\"",
        "echo '' >> \"$BUILD_SUMMARY_FILE\"",
        "# Configure Docker to skip TLS verification for ttl.sh",
        "mkdir -p ~/.docker",
        "cat > ~/.docker/config.json << 'EOF'",
        "{",
        "  \"experimental\": \"enabled\",",
        "  \"insecure-registries\": [\"ttl.sh\"]",
        "}",
        "EOF",
        "# Also try setting up buildkitd config",
        "mkdir -p ~/.config/buildkit",
        "cat > ~/.config/buildkit/buildkitd.toml << 'EOF'",
        "[registry.\"ttl.sh\"]",
        "  http = true",
        "  insecure = true",
        "EOF",
        "echo 'Docker configuration updated for ttl.sh'",
        "echo 'Note: You may need to restart Docker Desktop if this is the first run'",
        "echo ''",
        "for release in core rnd enterprise weka nuage; do",
        "  echo \"Building $release release...\"",
        "  echo '----------------------------'",
        "  echo \"Running smelt for $release...\"",
        "  go run . smelt --config \"input/config-silogen-${release}.yaml\" --non-interactive",
        "  echo \"Generating random UUID for image name...\"",
        "  UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')",
        "  IMAGE_NAME=\"ttl.sh/${UUID}:12h\"",
        "  echo \"Image name: $IMAGE_NAME\"",
        "  echo \"Running cast for $release...\"",
        "  # Try pushing to ttl.sh, fall back to local build if it fails",
        "  if go run . cast --config \"input/config-silogen-${release}.yaml\" --imageName \"$IMAGE_NAME\" --stackName \"${VERSION}-${release}\" --non-interactive; then",
        "    echo \"‚úÖ Successfully built and pushed: $IMAGE_NAME\"",
        "    echo \"- $release: $IMAGE_NAME (PUSHED to ttl.sh)\" >> \"$BUILD_SUMMARY_FILE\"",
        "  else",
        "    echo 'Failed to push to ttl.sh, building locally without push...'",
        "    LOCAL_IMAGE=\"localhost/${UUID}:latest\"",
        "    echo \"Using local image: $LOCAL_IMAGE\"",
        "    # Try with localhost registry, or skip cast entirely",
        "    if go run . cast --config \"input/config-silogen-${release}.yaml\" --imageName \"$LOCAL_IMAGE\" --stackName \"${VERSION}-${release}\" --non-interactive; then",
        "      echo \"‚úÖ Successfully built locally: $LOCAL_IMAGE\"",
        "      echo \"- $release: $LOCAL_IMAGE (LOCAL ONLY)\" >> \"$BUILD_SUMMARY_FILE\"",
        "    else",
        "      echo 'Cast failed, continuing with manifests only...'",
        "      echo \"- $release: No image built (MANIFESTS ONLY)\" >> \"$BUILD_SUMMARY_FILE\"",
        "    fi",
        "  fi",
        "  echo 'Cleaning stack...'",
        "  rm -rf \"stacks/${VERSION}-${release}/.git\" \"stacks/${VERSION}-${release}/.gitkeep\"",
        "  echo 'Creating release package...'",
        "  mkdir -p \"stacks/clusterforge-${release}\"",
        "  if [ -d \"stacks/${VERSION}-${release}\" ]; then",
        "    cp -r \"stacks/${VERSION}-${release}\"/* \"stacks/clusterforge-${release}/\"",
        "  fi",
        "  echo 'Creating tarball...'",
        "  tar -C stacks/ -zcf \"stacks/release-${release}-${VERSION}.tar.gz\" \"clusterforge-${release}\"",
        "  rm -rf \"stacks/clusterforge-${release}\"",
        "  echo \"‚úì Built release-${release}-${VERSION}.tar.gz\"",
        "  echo ''",
        "done",
        "echo ''",
        "echo 'üéâ Build Complete!'",
        "echo '=================='",
        "echo ''",
        "echo 'üì¶ Tarballs created:'",
        "ls -la stacks/*.tar.gz",
        "echo ''",
        "echo 'üê≥ Docker Images Summary:'",
        "cat \"$BUILD_SUMMARY_FILE\"",
        "echo ''",
        "echo 'Legend:'",
        "echo '  - PUSHED to ttl.sh: Image built and pushed to ttl.sh registry (accessible for 12 hours)'",
        "echo '  - LOCAL ONLY: Image built locally but not pushed (only available on this machine)'",
        "echo '  - MANIFESTS ONLY: No Docker image created (Kubernetes manifests only)'",
        "rm -f \"$BUILD_SUMMARY_FILE\""
      ]
    }
  }
}
